{"version":3,"sources":["Todo/InputField/InputField.js","Todo/TodoList/TodoList.js","Todo/Nav/Nav.js","Todo/Todo.js","App.js","serviceWorker.js","index.js"],"names":["InputField","props","state","className","type","name","title","onChange","this","onCheck","checked","isAllChecked","placeholder","onKeyDown","onClick","onRemoveAll","data-index","React","Component","TodoList","todoList","map","item","index","key","value","onRemove","Nav","Object","keys","navList","link","data-filter","activeLink","goTo","Todo","handleKeyDown","e","target","newItem","newList","slice","push","setState","recentList","todoState","getListState","filtrateList","localStorage","setItem","JSON","stringify","handleCheck","checkboxName","create","list","total","length","ready","filter","curr","dataset","filteredList","handleRemove","splice","getItem","parse","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","then","registration","unregister"],"mappings":"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","file":"static/js/main.8cb78273.chunk.js","sourcesContent":["import React from 'react';\r\nimport  './InputField.css';\r\n\r\nclass InputField extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return ( \r\n            <header className = \"todo__top\" >\r\n                <input type=\"checkbox\" \r\n                    name=\"choose-all\" \r\n                    title=\"Выбрать всё\"\r\n                    className=\"uk-checkbox todo__all\"\r\n                    onChange={this.props.onCheck}\r\n                    checked={this.props.isAllChecked}/>\r\n                <input type=\"text\" \r\n                    placeholder=\"Что нужно сделать?\"\r\n                    className=\"todo__field\"\r\n                    onKeyDown={this.props.onKeyDown}/>\r\n\r\n                <button className=\"uk-button uk-button-link todo__remove-all\"\r\n                        onClick={this.props.onRemoveAll}\r\n                        data-index=\"-1\">\r\n                        Удалить всё</button>\r\n            </header>\r\n        )\r\n    };\r\n}\r\n\r\nexport default InputField;","import React from 'react';\r\nimport './TodoList.css';\r\n\r\n\r\nclass TodoList extends React.Component {\r\n    render() {\r\n        return ( \r\n            <ul className = \"todo__list\" >\r\n                {this.props.todoList.map( (item, index) => {\r\n                    return(\r\n                        <li key={index} className={item.state ? \"checked\" : \"\" }>\r\n                            <label className=\"todo__item\">\r\n                                <input type=\"checkbox\" \r\n                                    name=\"todo-list\"\r\n                                    checked={item.state}\r\n                                    className=\"uk-checkbox todo__check\"\r\n                                    onChange={this.props.onCheck}\r\n                                    value = {index}\r\n                                    />\r\n                                {item.name}</label>\r\n                            <button data-index={index}\r\n                                    className=\"remove\"\r\n                                    onClick={this.props.onRemove}>\r\n                                Удалить</button>\r\n                        </li>\r\n                    )\r\n                })}\r\n              \r\n            </ul>\r\n        )\r\n    };\r\n}\r\n\r\nexport default TodoList;","import React from 'react';\r\nimport './Nav.css'\r\nclass Nav extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return ( \r\n            <nav className = \"todo__nav\" >\r\n                {Object.keys(this.props.navList).map((link, key) => {\r\n                    return <button\r\n                    data-filter={this.props.navList[link]}\r\n                    key={key}\r\n                    className={\"uk-button uk-button-link \" + (this.props.activeLink === this.props.navList[link] ? \"active\" : \"\")}\r\n                    onClick={this.props.goTo}>\r\n                        {link}</button>\r\n                })}\r\n            </nav>\r\n        )\r\n    };\r\n}\r\n\r\nexport default Nav;","import React from 'react';\r\nimport './Todo.css';\r\n\r\nimport InputField from './InputField/InputField';\r\nimport TodoList from './TodoList/TodoList';\r\nimport Nav from './Nav/Nav';\r\n\r\nclass Todo extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        const list = localStorage.getItem('todoList') ? JSON.parse(localStorage.getItem('todoList')) : [];\r\n        this.state = {\r\n            todoList:list,\r\n            recentList: [],\r\n            filteredList: [],\r\n            isAllChecked : false,  \r\n            todoState : \"\",\r\n            activeLink : \"all\"\r\n        }\r\n    }\r\n    componentDidMount(){\r\n        this.setState({\r\n            recentList : this.state.todoList.slice(),\r\n            filteredList: this.state.todoList.slice(),\r\n            todoState : this.getListState(this.state.todoList)});\r\n        \r\n    }\r\n\r\n    handleKeyDown = (e) => {\r\n        if(e.key === 'Enter' && e.target.value !== \"\"){\r\n            let newItem = {\r\n                \"name\" : e.target.value,\r\n                \"state\" : false\r\n            },\r\n            newList = this.state.todoList.slice();\r\n            newList.push(newItem);\r\n            this.setState({\r\n                todoList : newList,\r\n                recentList : newList.slice(),\r\n                isAllChecked: false,\r\n                todoState : this.getListState(newList)\r\n            }, () => {\r\n                this.filtrateList(null);\r\n                localStorage.setItem('todoList', JSON.stringify(this.state.todoList));\r\n            });\r\n            e.target.value = \"\";\r\n        }\r\n    }\r\n\r\n    handleCheck = (e) => {\r\n        let checkboxName = e.target.name\r\n        if(checkboxName === \"choose-all\"){\r\n            if(!this.state.isAllChecked) {                \r\n                let newList = this.state.todoList.map(item => {\r\n                    let newItem =  Object.create(item);\r\n                    newItem.state = true;\r\n                    return newItem\r\n                })\r\n                this.setState({\r\n                    todoList : newList,\r\n                    todoState: this.getListState(newList),\r\n                    isAllChecked: true\r\n                }, () => {\r\n                localStorage.setItem('todoList', JSON.stringify(this.state.todoList));\r\n                    this.filtrateList(null);\r\n                });\r\n            }\r\n            else{\r\n                this.setState({\r\n                    todoList : this.state.recentList,\r\n                    todoState: this.getListState(this.state.recentList),\r\n                    isAllChecked: false\r\n                }, () => {\r\n                localStorage.setItem('todoList', JSON.stringify(this.state.todoList));\r\n                    this.filtrateList(null);\r\n                });\r\n            }\r\n        }\r\n        else if(checkboxName === \"todo-list\"){\r\n            let index = e.target.value,\r\n                newList = this.state.todoList;\r\n            newList[index].state = !newList[index].state;\r\n            this.setState({\r\n                todoList : newList,\r\n                recentList : newList.slice(),\r\n                todoState : this.getListState(newList),\r\n                isAllChecked: false\r\n            },  () => {\r\n                localStorage.setItem('todoList', JSON.stringify(this.state.todoList));\r\n                this.filtrateList(null);\r\n            });\r\n\r\n        }\r\n    }\r\n\r\n    getListState = (list) => {\r\n        let total = list.length,\r\n            ready = list.filter(curr => curr.state).length;\r\n        return `${ready} / ${total}`;\r\n    }\r\n\r\n    filtrateList = (e) => {\r\n        let type = e ? e.target.dataset.filter : this.state.activeLink;\r\n        let newList = this.state.todoList.filter(filterByType)\r\n        this.setState({\r\n            filteredList: newList,\r\n            activeLink: type\r\n        })\r\n\r\n        function filterByType (item){\r\n            if(type === \"all\" ){\r\n                return true;\r\n            } else if (type === \"not-ready\" && !item.state){\r\n                return true;\r\n            } else if(type === \"ready\" && item.state){\r\n                return true;\r\n            }\r\n            else \r\n                return false;\r\n        }\r\n        \r\n    }\r\n\r\n    handleRemove = (e) => {\r\n        let index = e.target.dataset.index;\r\n        let newList = []\r\n        if(index > 0) {\r\n            newList = this.state.todoList.slice();\r\n            newList.splice(index, 1);\r\n        }\r\n        this.setState({\r\n                todoList : newList,\r\n            recentList : newList.slice(),\r\n            isAllChecked: false,\r\n            todoState : this.getListState(newList)\r\n        }, () => {\r\n            localStorage.setItem('todoList', JSON.stringify(this.state.todoList));\r\n            this.filtrateList(null);\r\n        }) \r\n    }\r\n\r\n    render() {\r\n        const navList = {\r\n            \"Все\" : \"all\",\r\n            \"Не готово\" : \"not-ready\",\r\n            \"Готово\" : \"ready\",\r\n        }\r\n        return ( \r\n            <div className = \"todo\" >\r\n                <InputField isAllChecked={this.state.isAllChecked}\r\n                            onKeyDown={this.handleKeyDown}\r\n                            onCheck={this.handleCheck}\r\n                            onRemoveAll={this.handleRemove}/>\r\n\r\n                    <TodoList todoList={this.state.filteredList}\r\n                                onCheck={this.handleCheck}\r\n                                onRemove={this.handleRemove}/>\r\n\r\n                    <footer className=\"todo__bottom\">\r\n                        <span  className=\"todo__state\">Готовность: {this.state.todoState}</span>\r\n                        <Nav navList={navList} \r\n                            activeLink={this.state.activeLink}\r\n                            goTo={this.filtrateList}/>\r\n                    </footer>\r\n            </div>\r\n        )\r\n    };\r\n}\r\n\r\nexport default Todo;","import React from 'react';\nimport './App.css';\nimport Todo from './Todo/Todo';\n\nfunction App() {\n  return (\n    <div className=\"content\">\n      <header className=\"header\">\n        <h1 className=\"header__title\">TODO</h1>\n      </header>\n      <main>\n        <Todo />\n      </main>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport  '../node_modules/uikit/dist/css/uikit.min.css';\n// import  '../node_modules/uikit/dist/js/uikit.min.js';\nimport './index.css';\nimport App from './App';\n\nimport * as serviceWorker from './serviceWorker';\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}